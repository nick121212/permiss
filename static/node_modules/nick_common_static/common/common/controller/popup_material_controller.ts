/**
 * Created by NICK on 15/9/16.
 * email:nick121212@126.com
 * qq:289412378
 * copyright NICK
 */


import ref = require('ref');
import baseController = require('common/common/controller/base_material_controller');
import gridController = require('common/common/controller/grid_material_controller');
import hybrid = require('common/libs/hybrid');

/*
 * controller的基类
 * */
export class PopupController<T,T1> extends baseController.BaseController {

    public isBusy:boolean = false;
    public schema:any;
    public form:Array<any>;
    public formData:T;
    public managerGrid:gridController.GridController<any>;
    public resolve:{[index: string]: ng.IPromise<any>};
    public dialogCloseFn:Function;
    public content:string;
    public currentItem:T1;

    private $promise:ng.IPromise<any>;

    constructor(args:IArguments) {
        super(args);
    }

    getPlatInfo() {
        var promise;

        this.isBusy = true;
        promise = hybrid.Native.JsCall.getPlatInfo(this.$q);
        promise.then(()=> {
            this.isBusy = false;
        });

        return promise;
    }

    submit($form:ng.IFormController, serverData?:T) {
        var _this = this,
            promises:{[index: string]: ng.IPromise<any>} = {};

        _this.$rootScope.$broadcast('schemaFormValidate');
        if ($form.$dirty && $form.$valid && !_this.isBusy) {

            angular.forEach(_this.resolve, (fn:Function, key:string) => {
                promises[key] = fn(serverData || _this.formData);
            });

            _this.$promise = _this.$q.all(promises);

            if (_this.resolve && _this.$promise) {
                _this.managerGrid && (_this.managerGrid.isBusy = true);
                _this.isBusy = true;

                _this.$promise.then((datas)=> {
                    $form.$setPristine();
                    if (_this.dialogCloseFn) {
                        _this.dialogCloseFn(datas);
                    } else {
                        //_this.$mdDialog.hide();
                        _this.alert(_this.schema.description, _this.content).finally(()=> {
                            _this.managerGrid && _this.managerGrid.getServerData && _this.managerGrid.getServerData();
                        });
                    }
                }).finally(()=> {
                    _this.managerGrid && (_this.managerGrid.isBusy = false);
                    _this.isBusy = false;
                    _this.$promise = null;
                });
            }
        }
    }
}