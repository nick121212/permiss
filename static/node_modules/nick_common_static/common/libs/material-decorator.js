define(['angular', 'schemaForm'], function (angular) {

    angular.module("schemaForm").run(["$templateCache", function ($templateCache) {
        $templateCache.put("decorators/material/actions-trcl.html", "<div class=\"btn-group schema-form-actions {{form.htmlClass}}\" ng-transclude=\"\"></div>");
        $templateCache.put("decorators/material/actions.html", "<div class=\"btn-group schema-form-actions {{form.htmlClass}}\"><input ng-repeat-start=\"item in form.items\" type=\"submit\" class=\"btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}\" value=\"{{item.title}}\" ng-if=\"item.type === \'submit\'\"> <button ng-repeat-end=\"\" class=\"btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}\" type=\"button\" ng-disabled=\"form.readonly\" ng-if=\"item.type !== \'submit\'\" ng-click=\"buttonClick($event,item)\">{{item.title}}</button></div>");
        $templateCache.put("decorators/material/array.html", "<div class=\"schema-form-{{form.type}} {{form.htmlClass}}\" sf-array=\"form\" ng-model=\"$$value$$\"><div layout=\"row\"><h3 ng-show=\"form.title && form.notitle !== true\">{{ form.title }}</h3><span flex=\"\"></span><md-button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray()\" ng-disabled=\"form.schema.maxItems <= modelArray.length\" class=\"md-icon-button\" type=\"button\" ng-class=\"form.style.add\"><ng-md-icon icon=\"add\"></ng-md-icon></md-button></div><md-list flex=\"\"><md-list-item ng-repeat=\"item in modelArray track by $index\" flex=\"\" schema-form-array-items=\"\"><md-button ng-hide=\"form.readonly || form.remove === null\" ng-click=\"deleteFromArray($index)\" class=\"md-icon-button\" type=\"button\"><ng-md-icon icon=\"delete\"></ng-md-icon></md-button></md-list-item></md-list><md-input-container style=\"padding: 0;\" ng-model=\"$$value$$\" sf-field-model=\"\" schema-validate=\"form\"><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container></div>");
        $templateCache.put("decorators/material/autocomplete.html", "<div class=\"form-group {{form.htmlClass}} schema-form-autocomplete\"><md-autocomplete flex=\"\" style=\"padding-bottom: 0;\" ng-model=\"$$value$$\" sf-field-model=\"replaceAll\" md-selected-item-change=\"form.onItemChange(ngModel,form.selectedItem)\" md-selected-item=\"form.selectedItem\" schema-validate=\"form\" md-search-text=\"form.searchText\" md-select-on-match=\"\" md-delay=\"500\" md-items=\"item in form.querySearch(form.searchText)\" md-item-text=\"item.label\" md-floating-label=\"{{form.title || form.key.slice(-1)[0]}}\"><span md-highlight-text=\"ctrl.searchText\">{{item.label}}</span></md-autocomplete><md-input-container><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container></div>");
        $templateCache.put("decorators/material/checkbox.html", "<div class=\"checkbox schema-form-checkbox {{form.htmlClass}}\"><md-checkbox sf-field-model=\"\" sf-changed=\"form\" ng-model-options=\"form.ngModelOptions\" ng-model=\"$$value$$\" ng-disabled=\"form.readonly\" schema-validate=\"form\" class=\"{{form.fieldHtmlClass}}\" name=\"{{form.key.slice(-1)[0]}}\" id=\"{{form.key.slice(-1)[0]}}\" aria-label=\"{{form.title || form.key.slice(-1)[0]}}\"><span ng-bind-html=\"form.title\"></span></md-checkbox><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></div>");
        $templateCache.put("decorators/material/checkboxes.html", "<div sf-array=\"form\" sf-field-model=\"\" class=\"form-group schema-form-checkboxes {{form.htmlClass}}\" ng-class=\"{\'has-error\': hasError(), \'has-success\': hasSuccess()}\"><label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label><div class=\"checkbox\" ng-repeat=\"val in titleMapValues track by $index\"><md-checkbox ng-model=\"titleMapValues[$index]\" sf-changed=\"form\" ng-disabled=\"form.readonly\" name=\"{{form.key.slice(-1)[0]}}\" ng-true-value=\"true\" ng-false-value=\"false\" aria-label=\"{{form.title || form.key.slice(-1)[0]}}\"><span ng-bind-html=\"form.titleMap[$index].name\"></span></md-checkbox></div><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></div>");
        $templateCache.put("decorators/material/chips.html", "<div class=\"form-group schema-form-chips {{form.htmlClass}}\" ng-class=\"{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}\"><md-chips sf-field-model=\"\" ng-model=\"$$value$$\" readonly=\"form.readonly\" flex=\"\" md-autocomplete-snap=\"\" md-require-match=\"true\" md-on-append=\"form.onAppend($$value$$)\" md-on-select=\"form.onSelect($$value$$)\" secondary-placeholder=\"{{form.title || form.key.slice(-1)[0]}}\" placeholder=\"{{form.title || form.key.slice(-1)[0]}}\"><md-chip-template><strong ng-if=\"!form.template\">{{$chip}}</strong></md-chip-template></md-chips><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></div>");
        $templateCache.put("decorators/material/default.html", "<md-input-container class=\"schema-form-input\" ng-class=\"form.htmlClass\" aria-label=\"{{ form.title }}\"><label ng-show=\"showTitle()\">{{form.title}}</label><ng-md-icon ng-if=\"form.icon\" style=\"{{form.icon.style}}\" icon=\"{{ form.icon.icon }}\"></ng-md-icon><input sf-field-model=\"\" ng-show=\"form.key\" type=\"{{form.type}}\" aria-label=\"{{ form.title }}\" step=\"any\" ng-model=\"$$value$$\" sf-changed=\"form\" id=\"{{form.key.slice(-1)[0]}}\" ng-model-options=\"form.ngModelOptions\" ng-class=\"form.fieldHtmlClass\" ng-disabled=\"form.readonly\" name=\"{{form.key.slice(-1)[0]}}\" schema-validate=\"form\"><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container>");
        $templateCache.put("decorators/material/fieldset-trcl.html", "<fieldset ng-disabled=\"form.readonly\" class=\"standard {{form.htmlClass}}\" flex=\"\"><legend ng-show=\"form.title\">{{ form.title }}</legend><div ng-transclude=\"\"></div></fieldset>");
        $templateCache.put("decorators/material/fieldset.html", "<fieldset ng-disabled=\"form.readonly\" class=\"standard {{form.htmlClass}}\" flex=\"\"><legend ng-show=\"form.title\">{{ form.title }}</legend></fieldset>");
        $templateCache.put("decorators/material/help.html", "<div class=\"helpvalue schema-form-helpvalue {{form.htmlClass}}\" ng-bind-html=\"form\"></div>");
        $templateCache.put("decorators/material/linkbutton.html", "<section class=\"schema-form-submit {{form.htmlClass}}\"><md-button ui-sref=\"{{form.sref}}\" flex=\"\" class=\"{{ form.style || \'md-primary\' }} {{form.fieldHtmlClass}}\" ng-disabled=\"form.readonly\">{{form.title}}</md-button></section>");
        $templateCache.put("decorators/material/radio-buttons.html", "<div class=\"form-group schema-form-radiobuttons {{form.htmlClass}}\" ng-class=\"{\'has-error\': hasError(), \'has-success\': hasSuccess()}\"><div><label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label></div><div class=\"btn-group\"><label class=\"btn {{ (item.value === $$value$$) ? form.style.selected || \'btn-default\' : form.style.unselected || \'btn-default\'; }}\" ng-class=\"{ active: item.value === $$value$$ }\" ng-repeat=\"item in form.titleMap\"><input type=\"radio\" class=\"{{form.fieldHtmlClass}}\" sf-changed=\"form\" style=\"display: none;\" ng-disabled=\"form.readonly\" ng-model=\"$$value$$\" ng-model-options=\"form.ngModelOptions\" schema-validate=\"form\" ng-value=\"item.value\" name=\"{{form.key.join(\'.\')}}\"> <span ng-bind-html=\"item.name\"></span></label></div><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/material/radios-inline.html", "<div class=\"form-group schema-form-radios-inline {{form.htmlClass}}\" ng-class=\"{\'has-error\': hasError(), \'has-success\': hasSuccess()}\"><label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label><md-radio-group layout=\"row\" sf-field-model=\"replaceAll\" ng-model=\"$$value$$\" class=\"{{form.fieldHtmlClass}}\" ng-class=\"{ active: item.value === $$value$$ }\" sf-changed=\"form\" schema-validate=\"form\" ng-disabled=\"form.readonly\" name=\"{{form.key.join(\'.\')}}\"><md-radio-button ng-repeat=\"item in form.titleMap\" ng-value=\"item.value\"><span ng-bind-html=\"item.name\"></span></md-radio-button></md-radio-group><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></div>");
        $templateCache.put("decorators/material/radios.html", "<div class=\"form-group schema-form-radios {{form.htmlClass}}\" ng-class=\"{\'has-error\': hasError(), \'has-success\': hasSuccess()}\"><label class=\"control-label\" ng-show=\"showTitle()\" aria-label=\"{{form.title}}\">{{form.title}} {{form.titleMap | json}}</label><md-radio-group sf-field-model=\"\" sf-changed=\"form\" ng-disabled=\"form.readonly\" name=\"{{form.key.join(\'.\')}}\"><md-radio-button ng-repeat=\"item in form.titleMap\" ng-value=\"item.value\" class=\"{{form.fieldHtmlClass}}\" sf-field-model=\"ng-class\" ng-class=\"{ active: item.value === $$value$$ }\"><span ng-bind-html=\"item.name\"></span></md-radio-button></md-radio-group><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></div>");
        $templateCache.put("decorators/material/section.html", "<div class=\"schema-form-section {{form.htmlClass}}\"><sf-decorator ng-repeat=\"item in form.items\" form=\"item\"></sf-decorator></div>");
        $templateCache.put("decorators/material/select.html", "<md-input-container class=\"{{form.htmlClass}} schema-form-select\"><label ng-show=\"showTitle()\">{{form.title}}</label><md-select sf-field-model=\"\" ng-model=\"$$value$$\" id=\"{{form.key.slice(-1)[0]}}\" ng-model-options=\"form.ngModelOptions\" ng-class=\"form.fieldHtmlClass\" ng-disabled=\"form.readonly\" name=\"{{form.key.slice(-1)[0]}}\" sf-changed=\"form\" aria-label=\"{{ form.title }}\" schema-validate=\"form\"><md-optgroup ng-repeat-start=\"(key, opt) in form.titleMap | orderBy:\'group\' as optGroups\" ng-if=\"opt.group && opt.group != optGroups[key-1].group\" label=\"{{opt.group}}\"><md-option ng-repeat=\"(key, filtered) in form.titleMap | filter: {group: opt.group} | orderBy:\'name\' as opts\" ng-value=\"filtered.value\">{{filtered.name}}</md-option></md-optgroup><md-option ng-repeat-end=\"\" ng-if=\"!opt.group\" ng-style=\"{{opt.style}}\" ng-value=\"opt.value\">{{opt.name}}</md-option></md-select><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container>");
        $templateCache.put("decorators/material/submit.html", "<section class=\"schema-form-submit {{form.htmlClass}}\"><md-button class=\"md-raised {{ form.style || \'md-primary\' }} {{form.fieldHtmlClass}}\" ng-disabled=\"form.readonly\"><ng-md-icon ng-if=\"form.icon\" ng-style=\"form.icon.style\" icon=\"form.icon.icon\"></ng-md-icon>{{form.title}}</md-button></section>");
        $templateCache.put("decorators/material/tabarray.html", "<div sf-array=\"form\" ng-init=\"selected = { tab: 0 }\" class=\"clearfix schema-form-tabarray schema-form-tabarray-{{form.tabType || \'left\'}} {{form.htmlClass}}\"><div ng-if=\"!form.tabType || form.tabType !== \'right\'\" ng-class=\"{\'col-xs-3\': !form.tabType || form.tabType === \'left\'}\"><ul class=\"nav nav-tabs\" ng-class=\"{ \'tabs-left\': !form.tabType || form.tabType === \'left\'}\"><li ng-repeat=\"item in modelArray track by $index\" ng-click=\"$event.preventDefault() || (selected.tab = $index)\" ng-class=\"{active: selected.tab === $index}\"><a href=\"#\">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide=\"form.readonly\" ng-click=\"$event.preventDefault() || (selected.tab = appendToArray().length - 1)\"><a href=\"#\"><i class=\"glyphicon glyphicon-plus\"></i> {{ form.add || \'Add\'}}</a></li></ul></div><div ng-class=\"{\'col-xs-9\': !form.tabType || form.tabType === \'left\' || form.tabType === \'right\'}\"><div class=\"tab-content {{form.fieldHtmlClass}}\"><div class=\"tab-pane clearfix\" ng-repeat=\"item in modelArray track by $index\" ng-show=\"selected.tab === $index\" ng-class=\"{active: selected.tab === $index}\"><sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator><button ng-hide=\"form.readonly\" ng-click=\"selected.tab = deleteFromArray($index).length - 1\" type=\"button\" class=\"btn {{ form.style.remove || \'btn-default\' }} pull-right\"><i class=\"glyphicon glyphicon-trash\"></i> {{ form.remove || \'Remove\'}}</button></div></div></div><div ng-if=\"form.tabType === \'right\'\" class=\"col-xs-3\"><ul class=\"nav nav-tabs tabs-right\"><li ng-repeat=\"item in modelArray track by $index\" ng-click=\"$event.preventDefault() || (selected.tab = $index)\" ng-class=\"{active: selected.tab === $index}\"><a href=\"#\">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide=\"form.readonly\" ng-click=\"$event.preventDefault() || appendToArray()\"><a href=\"#\"><i class=\"glyphicon glyphicon-plus\"></i> {{ form.add || \'Add\'}}</a></li></ul></div></div>");
        $templateCache.put("decorators/material/tabs.html", "<div ng-init=\"selected = 0\" class=\"schema-form-tabs {{form.htmlClass}}\"><md-tabs md-selected=\"selected.tab\"><md-tab ng-repeat=\"tab in form.tabs\" md-on-select=\"onTabSelected(tab)\" md-on-deselect=\"announceDeselected(tab)\" ng-disabled=\"form.readonly\"><md-tab-label>{{tab.title}}</md-tab-label><md-tab-body><sf-decorator ng-repeat=\"item in tab.items\" form=\"item\"></sf-decorator></md-tab-body></md-tab></md-tabs></div>");
        $templateCache.put("decorators/material/textarea.html", "<md-input-container class=\"{{form.htmlClass}} schema-form-textarea\"><label ng-show=\"showTitle()\">{{form.title}}</label> <textarea ng-class=\"form.fieldHtmlClass\" ng-model=\"$$value$$\" id=\"{{form.key.slice(-1)[0]}}\" sf-changed=\"form\" ng-disabled=\"form.readonly\" sf-field-model=\"\" schema-validate=\"form\" md-maxlength=\"{{form.maxlength}}\" name=\"{{form.key.slice(-1)[0]}}\"></textarea><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container>");
        $templateCache.put("decorators/material/toolbar.html", "<div layout=\"column\" flex=\"\"><md-toolbar md-scroll-shrink=\"\"><div class=\"md-toolbar-tools\"><h2>{{ form.title }}</h2><span flex=\"\"></span><md-button ng-repeat=\"item in form.items\" ng-click=\"item.onClick($event)\" class=\"md-icon-button\"><md-tooltip ng-if=\"!item.notitle\">{{ item.title }}</md-tooltip><ng-md-icon ng-style=\"item.icon.style\" icon=\"{{item.icon.icon}}\"></ng-md-icon></md-button></div></md-toolbar></div>");
        $templateCache.put("decorators/material/uploader-single.html", "<div class=\"schema-form-uploader-single\" ng-class=\"form.htmlClass\" flex=\"\"><qiniu-uploader schema-validate=\"form\" sf-field-model=\"\" ng-model=\"$$value$$\" name=\"{{form.key.slice(-1)[0]}}\" form=\"form\" flex=\"\" schema=\"schema\"></qiniu-uploader><md-input-container><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container></div>");
        $templateCache.put("decorators/material/uploader.html", "<div class=\"btn-group schema-form-actions\" ng-class=\"form.htmlClass\" layout=\"column\"><qiniu-uploader schema-validate=\"form\" sf-field-model=\"\" id=\"{{form.key.slice(-1)[0]}}\" name=\"{{form.key.slice(-1)[0]}}\" form=\"form\" flex=\"\" schema=\"schema\"></qiniu-uploader><md-input-container><div ng-messages=\"ngModel.$error\"><div sf-message=\"\" ng-message=\"\"></div></div></md-input-container></div>");
    }]);
    angular.module('schemaForm').config(['schemaFormDecoratorsProvider', 'sfBuilderProvider', 'sfPathProvider',
        function (decoratorsProvider, sfBuilderProvider, sfPathProvider) {
            var base = 'decorators/material/';

            var simpleTransclusion = sfBuilderProvider.builders.simpleTransclusion;
            var ngModelOptions = sfBuilderProvider.builders.ngModelOptions;
            var ngModel = sfBuilderProvider.builders.ngModel;
            var sfField = sfBuilderProvider.builders.sfField;
            var condition = sfBuilderProvider.builders.condition;
            var array = sfBuilderProvider.builders.array;

            // Tabs is so bootstrap specific that it stays here.
            var tabs = function (args) {
                if (args.form.tabs && args.form.tabs.length > 0) {
                    var tabContent = args.fieldFrag.querySelector('.tab-content');

                    args.form.tabs.forEach(function (tab, index) {
                        var div = document.createElement('div');
                        div.className = 'tab-pane';
                        div.setAttribute('ng-disabled', 'form.readonly');
                        div.setAttribute('ng-show', 'selected.tab === ' + index);
                        div.setAttribute('ng-class', '{active: selected.tab === ' + index + '}');

                        var childFrag = args.build(tab.items, args.path + '.tabs[' + index + '].items', args.state);
                        div.appendChild(childFrag);
                        tabContent.appendChild(div);
                    });
                }
            };

            var defaults = [sfField, ngModel, ngModelOptions, condition];
            decoratorsProvider.defineDecorator('materialDecorator', {
                textarea: {template: base + 'textarea.html', builder: defaults},
                fieldset: {template: base + 'fieldset.html', builder: [sfField, simpleTransclusion, condition]},
                array: {template: base + 'array.html', builder: [sfField, ngModelOptions, ngModel, array, condition]},
                tabarray: {
                    template: base + 'tabarray.html',
                    builder: [sfField, ngModelOptions, ngModel, array, condition]
                },
                tabs: {template: base + 'tabs.html', builder: [sfField, ngModelOptions, tabs, condition]},
                section: {template: base + 'section.html', builder: [sfField, simpleTransclusion, condition]},
                conditional: {template: base + 'section.html', builder: [sfField, simpleTransclusion, condition]},
                actions: {template: base + 'actions.html', builder: defaults},
                select: {template: base + 'select.html', builder: defaults},
                checkbox: {template: base + 'checkbox.html', builder: defaults},
                checkboxes: {
                    template: base + 'checkboxes.html',
                    builder: [sfField, ngModelOptions, ngModel, array, condition]
                },
                number: {template: base + 'default.html', builder: defaults},
                password: {template: base + 'default.html', builder: defaults},
                submit: {template: base + 'submit.html', builder: defaults},
                button: {template: base + 'submit.html', builder: defaults},
                radios: {template: base + 'radios.html', builder: defaults},
                'radios-inline': {template: base + 'radios-inline.html', builder: defaults},
                radiobuttons: {template: base + 'radio-buttons.html', builder: defaults},
                help: {template: base + 'help.html', builder: defaults},
                chips: {template: base + 'chips.html', builder: defaults},
                'default': {template: base + 'default.html', builder: defaults},
                uploader: {template: base + 'uploader.html', builder: defaults},
                'uploader-single': {template: base + 'uploader-single.html', builder: defaults},
                linkbutton: {template: base + 'linkbutton.html', builder: defaults},
                autocomplete: {template: base + 'autocomplete.html', builder: defaults}
            }, []);

        }]);

    /**
     * It might be a bug, but currently input[type=number] does not add
     * a parser, so the model gets populated with a string. It does however stop non numbers so it
     * must have some preproccessing. Anyway, this adds parser before schema-validate hooks into it.
     * FIXME: this is still not a complete solution. Inputting a string in an input[type=number] results
     * in parsers never firing and ngModel value removed. So no validation from schema-validate either.
     */
    angular.module('schemaForm').directive('sfTypeParser', function () {
        return {
            restrict: 'A',
            scope: false,
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                var once = scope.$watch(attrs.sfTypeParser, function (schema) {
                    if (!schema) {
                        return;
                    }

                    var isNumber = schema.type.indexOf('number') !== -1;
                    var isInteger = schema.type.indexOf('integer') !== -1;
                    var numberRE = /^[0-9]*$/;
                    // Use index of since type can be either an array with two values or a string.
                    if (isNumber || isInteger) {
                        // The timing here seems to work. i.e. we get in before schema-validate
                        ngModel.$parsers.push(function (viewValue) {
                            var value;
                            if (isNumber) {
                                value = parseFloat(viewValue);
                            } else if (numberRE.test(viewValue)) {
                                // We test the value to check that it's a valid integer, otherwise we can easily
                                // get float -> integer parsing behind the scenes.
                                value = parseInt(viewValue, 10);
                            }
                            console.log('parser', numberRE.test(viewValue), viewValue, value)
                            if (value === undefined || isNaN(value)) {
                                //Let the validation fail. @FIXME: it fails with "required" for some reason.
                                return viewValue;
                            }
                            return value;
                        });
                    }

                    once();
                });
            }
        };
    });
});